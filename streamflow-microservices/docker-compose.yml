services:
  # Databases
  postgres-auth:
    image: postgres:15
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-playlist:
    image: postgres:15
    environment:
      POSTGRES_DB: playlist_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - ./playlist-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-playlist-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d playlist_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql-user:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: user_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3308:3306"
    volumes:
      - mysql-user-data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb-video:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb_video_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb-monitoring:
    image: mongo:6
    ports:
      - "27018:27017"
    volumes:
      - mongodb_monitoring_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb-social:
    image: mongo:6
    ports:
      - "27019:27017"
    volumes:
      - mongodb_social_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Application Services
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50051"]
      interval: 10s
      start_period: 30s
      timeout: 5s
      retries: 5
    depends_on:
      mysql-user:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./user-service/.env

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgres-auth:
        condition: service_healthy
      user-service:
        condition: service_healthy
    env_file:
      - ./auth-service/.env

  playlist-service:
    build:
      context: .
      dockerfile: ./playlist-service/Dockerfile
    ports:
      - "50052:50052"
    depends_on:
      postgres-playlist:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50052"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    env_file:
      - ./playlist-service/.env

  video-service:
    build:
      context: .
      dockerfile: ./video-service/Dockerfile
    ports:
      - "3003:3003"
    depends_on:
      mongodb-video:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    env_file:
      - ./video-service/.env

  social-service:
    build:
      context: .
      dockerfile: ./social-service/Dockerfile
    ports:
      - "50053:50053"
    depends_on:
      mongodb-social:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50053"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    env_file:
      - ./social-service/.env

  mariadb-billing:
    image: mariadb:10.6
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: billing_db
      MYSQL_USER: billing_user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mariadb-billing-data:/var/lib/mysql
      - ./billing-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5



  billing-service:
    build:
      context: .
      dockerfile: ./billing-service/Dockerfile
    ports:
      - "50054:50054"
    depends_on:
      mariadb-billing:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50054"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    env_file:
      - ./billing-service/.env

  monitoring-service:
    build:
      context: .
      dockerfile: ./monitoring-service/Dockerfile
    ports:
      - "50055:50055"
    depends_on:
      mongodb-monitoring:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50055"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    env_file:
      - ./monitoring-service/.env

  email-service:
    build:
      context: .
      dockerfile: ./email-service/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./email-service/.env

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      user-service:
        condition: service_healthy
      # Temporarily disabling other dependencies to debug startup
      # auth-service:
      #   condition: service_healthy
      # playlist-service:
      #   condition: service_healthy
      # video-service:
      #   condition: service_healthy
      # social-service:
      #   condition: service_healthy
      # billing-service:
      #   condition: service_healthy
      # monitoring-service:
      #   condition: service_healthy
      # email-service:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    env_file:
      - ./api-gateway/.env

volumes:
  postgres-auth-data:
  postgres-playlist-data:
  mysql-user-data:
  mongodb_video_data:
  mongodb_monitoring_data:
  mongodb_social_data:
  mariadb-billing-data:
  rabbitmq_data:
